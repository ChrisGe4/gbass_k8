apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ORG
  name:	PEER_NAME-ORG
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
       app: hyperledger
       role: peer
       peer-id: PEER_NAME
       org: ORG
    spec:
      initContainers:
            - name: init-myservice
              image: "gcr.io/GCP_PROJECT_NAME/gcsfuse"
              imagePullPolicy: Always
              command: ['sh', '-c', 'bash /gcsfuse/setUp.sh']
              securityContext:
                 privileged: true
                 capabilities:
                   add:
                     - SYS_ADMIN
              env:
                - name: DESTINATION_DIR
                  value: "/hf"
                - name: FUSE_MOUNT_DIR
                  value: "/gcsfuse/temp"
                - name: FUSE_BUCKET_NAME
                  value: "GCS_BUCKET"
                - name: CRYPTO
                  value: "DOMAIN/crypto-config/peerOrganizations/ORG"
                - name: CHANNEL
                  value: "DOMAIN/channel"
                - name: CHAINCODE
                  value: "DOMAIN/chaincode"
                - name: ORDERER_TLS
                  value: "DOMAIN/crypto-config/ordererOrganizations/DOMAIN/orderers/orderer.DOMAIN/tls"
              volumeMounts:
               - name: certificate
                 mountPath: /hf/DOMAIN/crypto-config/peerOrganizations/ORG/peers/PEER_NAME.ORG
               - name: channel
                 mountPath: /hf/DOMAIN/channel
               - mountPath: /hf/DOMAIN
                 name: artifacts
               - mountPath: /hf/DOMAIN/chaincode/java
                 name: chaincode-java
               - mountPath: /hf/DOMAIN/chaincode/go
                 name: chaincode-go
               - mountPath: /hf/DOMAIN/ordererOrganizations/DOMAIN/orderers/orderer.DOMAIN/tls
                 name: orderer-tls


      containers:
      - name: couchdb
        image: hyperledger/fabric-couchdb:x86_64-0.4.7
        ports:
         - containerPort: COUDH_DB_PORT


      - name: PEER_NAME-ORG
        image: hyperledger/fabric-peer:x86_64-1.0.0
        env:
        - name: CORE_LEDGER_STATE_STATEDATABASE
          value: "CouchDB"
        - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
          value: "localhost:COUDH_DB_PORT"
        - name: CORE_VM_ENDPOINT
          value: "unix:///host/var/run/docker.sock"
        - name: CORE_LOGGING_LEVEL
          value: "DEBUG"
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_ORGLEADER
          value: "false" 
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/etc/hyperledger/crypto/peer/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/etc/hyperledger/crypto/peer/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/etc/hyperledger/crypto/peer/tls/ca.crt"
        - name: CORE_PEER_ID
          value: PEER_NAME.ORG
        - name: CORE_PEER_ADDRESS
          value: PEER_NAME.ORG:PEER_PORT
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: PEER_NAME.ORG:PEER_PORT
        - name: CORE_PEER_LOCALMSPID
          value: ORGMSP
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        ports:
         - containerPort: PEER_PORT
         - containerPort: PEER_CHAINCODE_PORT
         - containerPort: PEER_EVENT_PORT
        command: ["/bin/sh"]
        args: ["-c","peer node start;"]
        volumeMounts:
         - mountPath: /etc/hyperledger/crypto/peer
           name: certificate
         - mountPath: /opt/gopath/src/org/peer/channel-artifacts
           name: channel
         - mountPath: /host/var/run/
           name: run

      - name: cli-PEER_NAME-ORG
        image:  hyperledger/fabric-tools:x86_64-1.1.0
        env:
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: GOPATH
          value: /opt/gopath
        - name: CORE_LOGGING_LEVEL
          value: DEBUG
        - name: CORE_PEER_LOCALMSPID
          value: ORGMSP
        - name: CORE_PEER_MSPCONFIGPATH
          value: /etc/hyperledger/crypto/peer/msp
        - name: CORE_PEER_TLS_KEY_FILE
          value: /etc/hyperledger/crypto/peer/tls/server.key
        - name: CORE_PEER_TLS_CERT_FILE
          value: /etc/hyperledger/crypto/peer/tls/server.crt
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /etc/hyperledger/crypto/peer/tls/ca.crt
        - name: CORE_PEER_ID
          value: PEER_NAME.ORG
        - name: CORE_PEER_ADDRESS
          value: PEER_NAME.ORG:PEER_PORT
        workingDir: /etc/hyperledger/artifacts
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 30; done;" ]
        volumeMounts:
         - mountPath: /host/var/run/
           name: run
         - mountPath: /etc/hyperledger/crypto/peer
           name: certificate
         - mountPath: /etc/hyperledger/artifacts
           name: artifacts
         - mountPath: /opt/chaincode
           name: chaincode-java
         - mountPath: /opt/gopath/src
           name: chaincode-go
         - mountPath: /etc/hyperledger/crypto/orderer/tls
           name: orderer-tls



      volumes:
         - name: certificate
           emptyDir: {}
         - name: run
           hostPath:
             path: /var/run
             type: Directory
         - name: channel
           emptyDir: {}
         - name: artifacts
           emptyDir: {}
         - name: chaincode-java
           emptyDir: {}
         - name: chaincode-go
           emptyDir: {}
         - name: orderer-tls
           emptyDir: {}
       

---
apiVersion: v1
kind: Service
metadata:
   namespace: ORG
   name: PEER_NAME
spec:
 selector:
   app: hyperledger
   role: peer
   peer-id: PEER_NAME
   org: ORG
 type: NodePort
 ports:
   - name: externale-listen-endpoint
     protocol: TCP
     port: PEER_PORT
     targetPort: PEER_PORT
     nodePort: NODEPORT_PEER

   - name: chaincode-listen
     protocol: TCP
     port: PEER_CHAINCODE_PORT
     targetPort: PEER_CHAINCODE_PORT
     nodePort: NODEPORT_CHAINCODE

#   - name: peer-event-listen
#     protocol: TCP
#     port: PEER_EVENT_PORT
#     targetPort: PEER_EVENT_PORT
#     nodePort: NODEPORT_EVENT
---
