apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: boa
  name:	peer0-boa
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
       app: hyperledger
       role: peer
       peer-id: peer0
       org: boa
    spec:
      initContainers:
            - name: init-myservice
              image: "gcr.io/hyperledger-poc/gcsfuse"
              imagePullPolicy: Always
              command: ['sh', '-c', 'bash /gcsfuse/setUp.sh']
              securityContext:
                 privileged: true
                 capabilities:
                   add:
                     - SYS_ADMIN
              env:
                - name: DESTINATION_DIR
                  value: "/hf"
                - name: FUSE_MOUNT_DIR
                  value: "/gcsfuse/temp"
                - name: FUSE_BUCKET_NAME
                  value: "hyperledger-poc"
                - name: CRYPTO
                  value: "test/crypto-config/peerOrganizations/boa"
                - name: PEER_NAME
                  value: "peer0"
                - name: ORG
                  value: "boa"
                - name: CHANNEL
                  value: "test/channel"
                - name: CHAINCODE
                  value: "test/chaincode"
                - name: ORDERER_TLS
                  value: "test/crypto-config/ordererOrganizations/test/orderers/orderer.test/tls"
              volumeMounts:
               - name: certificate
                 mountPath: /hf/test/crypto-config/peerOrganizations/boa
               - name: channel
                 mountPath: /hf/test/channel
#               - mountPath: /hf/test
#                 name: artifacts
               - mountPath: /hf/test/chaincode/java
                 name: chaincode-java
               - mountPath: /hf/test/chaincode/go
                 name: chaincode-go
               - mountPath: /hf/test/crypto-config/ordererOrganizations/test/orderers/orderer.test/tls
                 name: orderer-tls


      containers:
      - name: couchdb
        image: hyperledger/fabric-couchdb:x86_64-0.4.7
        ports:
         - containerPort: 5984


      - name: peer0-boa
        image: hyperledger/fabric-peer:x86_64-1.1.0
        env:
        - name: CORE_LEDGER_STATE_STATEDATABASE
          value: "CouchDB"
        - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
          value: "localhost:5984"
        - name: CORE_VM_ENDPOINT
          value: "unix:///host/var/run/docker.sock"
        - name: CORE_LOGGING_LEVEL
          value: "DEBUG"
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_PEER_GOSSIP_USELEADERELECTION
          value: "true"
        - name: CORE_PEER_GOSSIP_boaLEADER
          value: "false" 
        - name: CORE_PEER_PROFILE_ENABLED
          value: "true"
        - name: CORE_PEER_TLS_CERT_FILE
          value: "/etc/hyperledger/crypto/peer/tls/server.crt"
        - name: CORE_PEER_TLS_KEY_FILE
          value: "/etc/hyperledger/crypto/peer/tls/server.key"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: "/etc/hyperledger/crypto/peer/tls/ca.crt"
        - name: CORE_PEER_ID
          value: peer0.boa
        - name: CORE_PEER_ADDRESS
          value: peer0.boa:7051
        - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
          value: peer0.boa:7051
        - name: CORE_PEER_LOCALMSPID
          value: boaMSP
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        ports:
         - containerPort: 7051
         - containerPort: 7052
         - containerPort: 7053
        command: ["/bin/sh"]
        args: ["-c","peer node start;"]
        volumeMounts:
         - mountPath: /etc/hyperledger/crypto/peer
           name: certificate
           subPath: peers/peer0.boa
         - mountPath: /opt/gopath/src/org/peer/channel-artifacts
           name: channel
         - mountPath: /host/var/run/
           name: run

      - name: cli-peer0-boa
        image:  hyperledger/fabric-tools:x86_64-1.1.0
        env:
        - name: CORE_PEER_TLS_ENABLED
          value: "true"
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: GOPATH
          value: /opt/gopath
        - name: CORE_LOGGING_LEVEL
          value: DEBUG
        - name: CORE_PEER_LOCALMSPID
          value: boaMSP
        - name: CORE_PEER_MSPCONFIGPATH
          value: /etc/hyperledger/fabric/msp
#        - name: CORE_PEER_TLS_KEY_FILE
#          value: /etc/hyperledger/crypto/peer/tls/server.key
#        - name: CORE_PEER_TLS_CERT_FILE
#          value: /etc/hyperledger/crypto/peer/tls/server.crt
#        - name: CORE_PEER_TLS_ROOTCERT_FILE
#          value: /etc/hyperledger/crypto/peer/tls/ca.crt
        - name: CORE_PEER_ID
          value: peer0.boa
        - name: CORE_PEER_ADDRESS
          value: peer0.boa:7051
        workingDir: /opt/gopath/src/org/peer
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 30; done;" ]
        volumeMounts:
         - mountPath: /host/var/run/
           name: run
         - mountPath: /etc/hyperledger/fabric/msp
           name: certificate
           subPath: users/Admin@org1/msp
         - mountPath: /opt/gopath/src/org/peer/channel-artifacts
           name: channel
         - mountPath: /opt/chaincode
           name: chaincode-java
         - mountPath: /opt/gopath/src
           name: chaincode-go
         - mountPath: /etc/hyperledger/crypto/orderer/tls
           name: orderer-tls



      volumes:
         - name: certificate
           emptyDir: {}
         - name: run
           hostPath:
             path: /var/run
             type: Directory
         - name: channel
           emptyDir: {}
#         - name: artifacts
#           emptyDir: {}
         - name: chaincode-java
           emptyDir: {}
         - name: chaincode-go
           emptyDir: {}
         - name: orderer-tls
           emptyDir: {}
       

---
apiVersion: v1
kind: Service
metadata:
   namespace: boa
   name: peer0
spec:
 selector:
   app: hyperledger
   role: peer
   peer-id: peer0
   org: boa
 type: NodePort
 ports:
   - name: externale-listen-endpoint
     protocol: TCP
     port: 7051
     targetPort: 7051
     nodePort: 30101

   - name: chaincode-listen
     protocol: TCP
     port: 7052
     targetPort: 7052
     nodePort: 30102

---
